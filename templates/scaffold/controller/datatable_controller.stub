<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_FORMS$\$MODEL_NAME$FormFactory;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\View\View;
use Laracasts\Flash\Flash;

class $MODEL_NAME$Controller extends AppBaseController
{

    /** @var $MODEL_NAME$Repository */
    private $$MODEL_NAME_CAMEL$Repository;

    /** @var $MODEL_NAME$FormFactory */
    private $$MODEL_NAME_CAMEL$FormFactory;

    public function __construct(
        $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository,
        $MODEL_NAME$FormFactory $$MODEL_NAME_CAMEL$FormFactory
    )
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repository;
        $this->$MODEL_NAME_CAMEL$FormFactory = $$MODEL_NAME_CAMEL$FormFactory;

        $this->authorizeResource($MODEL_NAME$::class);
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @return View
     */
    public function index()
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index');
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @param Request $request
     *
     * @return RedirectResponse|View
     */
    public function create(Request $request)
    {
        return $this->createForm($request);
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Request $request
     *
     * @return RedirectResponse|View
     */
    public function store(Request $request)
    {
        return $this->createForm($request);
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     *
     * @return View
     */
    public function show($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show', ['$MODEL_NAME_CAMEL$' => $$MODEL_NAME_CAMEL$]);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     * @param Request $request
     *
     * @return RedirectResponse|View
     */
    public function edit($MODEL_NAME$ $$MODEL_NAME_CAMEL$, Request $request)
    {
        return $this->updateForm($$MODEL_NAME_CAMEL$, $request);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     * @param Request $request
     *
     * @return RedirectResponse|View
     */
    public function update($MODEL_NAME$ $$MODEL_NAME_CAMEL$, Request $request)
    {
        return $this->updateForm($$MODEL_NAME_CAMEL$, $request);
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     *
     * @return RedirectResponse
     */
    public function destroy($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        $this->$MODEL_NAME_CAMEL$Repository->delete($$MODEL_NAME_CAMEL$->id);

        Flash::success(__('Záznam úspěšně smazán'));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.index'));
    }

    /**
     * @param Request $request
     *
     * @return RedirectResponse|View
     */
    private function createForm(Request $request)
    {
        $$MODEL_NAME_CAMEL$ = new $MODEL_NAME$();
        $form = $this->$MODEL_NAME_CAMEL$FormFactory->create($$MODEL_NAME_CAMEL$, route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.store'), 'POST');

        $form->handleRequest($request);

        if ($form->isSubmitted() === TRUE && $form->isValid()) {
            $$MODEL_NAME_CAMEL$->save();

            Flash::success(__('Záznam úspěšně vytvořen'));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.show', $$MODEL_NAME_CAMEL$));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create', ['form' => $form]);
    }


    /**
     * @param $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     * @param Request $request
     *
     * @return RedirectResponse|View
     */
    private function updateForm($MODEL_NAME$ $$MODEL_NAME_CAMEL$, Request $request)
    {
        $form = $this->$MODEL_NAME_CAMEL$FormFactory->create($$MODEL_NAME_CAMEL$, route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.update', $$MODEL_NAME_CAMEL$), 'PATCH');

        $form->handleRequest($request);

        if ($form->isSubmitted() === TRUE && $form->isValid()) {
            $$MODEL_NAME_CAMEL$->save();

            Flash::success(__('Záznam úspěšně aktualizován'));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DASHED$.show', $$MODEL_NAME_CAMEL$));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit', ['form' => $form]);
    }
}
